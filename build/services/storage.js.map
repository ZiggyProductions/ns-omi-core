{"version":3,"sources":["../../src/services/storage.js"],"names":["bluebird","require","redis","fs","promisifyAll","RedisClient","prototype","db","createClient","prefix","storage","room","undefined","path","loadState","serializedState","getAsync","JSON","parse","err","saveState","state","set","stringify","console","error","saveGame","writeFileSync"],"mappings":";;;;;AAAA;;;AAGA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,IAAME,KAAKF,QAAQ,IAAR,CAAX;AACAD,SAASI,YAAT,CAAsBF,MAAMG,WAAN,CAAkBC,SAAxC;AACA,IAAMC,KAAKL,MAAMM,YAAN,CAAmB,EAACC,QAAO,UAAR,EAAnB,CAAX;;AAEA,IAAIC,UAAU;AACVC,UAAKC,SADK;AAEVC,UAAKD,SAFK;AAGVE,eAAW,2BAAY;AACnB,YAAG;AACC,gBAAMC,kBAAkB,MAAMR,GAAGS,QAAH,CAAYN,QAAQC,IAApB,CAA9B;AACA,gBAAG,SAASI,eAAZ,EACI,OAAOH,SAAP;AACJ,mBAAOK,KAAKC,KAAL,CAAWH,eAAX,CAAP;AACH,SALD,CAKE,OAAMI,GAAN,EAAW;AACT,mBAAOP,SAAP;AACH;AACJ,KAZS;;AAcVQ,eAAW,mBAACC,KAAD,EAAW;AAClB,YAAG;AACCd,eAAGe,GAAH,CAAOZ,QAAQC,IAAf,EAAoBM,KAAKM,SAAL,CAAeF,KAAf,CAApB;AACH,SAFD,CAEE,OAAMF,GAAN,EAAW;AAAEK,oBAAQC,KAAR,CAAcN,GAAd;AAAoB;AACtC,KAlBS;;AAoBVO,cAAU,kBAACL,KAAD,EAAW;AACjB,YAAG;AACC,mBAAOlB,GAAGwB,aAAH,CAAiBjB,QAAQG,IAAR,GAAeH,QAAQC,IAAvB,GAA8B,OAA/C,EAAwDM,KAAKM,SAAL,CAAeF,KAAf,CAAxD,EAA+E,MAA/E,CAAP;AACH,SAFD,CAEE,OAAOF,GAAP,EAAW;AACTK,oBAAQC,KAAR,CAAcN,GAAd;AACA,mBAAOA,GAAP;AACH;AACJ;AA3BS,CAAd;;kBA8BeT,O","file":"storage.js","sourcesContent":["/**\n * Created by GAZ on 7/13/17.\n */\nconst bluebird = require('bluebird');\nconst redis = require('redis');\nconst fs = require('fs');\nbluebird.promisifyAll(redis.RedisClient.prototype);\nconst db = redis.createClient({prefix:'ns-core-'});\n\nvar storage = {\n    room:undefined,\n    path:undefined,\n    loadState: async () => {\n        try{\n            const serializedState = await db.getAsync(storage.room);\n            if(null === serializedState)\n                return undefined;\n            return JSON.parse(serializedState);\n        } catch(err) {\n            return undefined;\n        }\n    },\n\n    saveState: (state) => {\n        try{\n            db.set(storage.room,JSON.stringify(state));\n        } catch(err) { console.error(err) }\n    },\n\n    saveGame: (state) => {\n        try{\n            return fs.writeFileSync(storage.path + storage.room + '.json', JSON.stringify(state), 'utf8');\n        } catch (err){\n            console.error(err)\n            return err;\n        }\n    }\n}\n\nexport default storage;\n"]}